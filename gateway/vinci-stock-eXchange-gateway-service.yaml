openapi: 3.0.3
info:
  title: vinci-stock-eXchange-gateway-service
  description: vinci-stock-eXchange-gateway-service
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development server

paths:

  /auth:

    post:
      summary: Authenticate user account
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentials'
      responses:
        '200':
          description: User account authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string


  /acounts/{username}:
    parameters:
      - name: username
        in: path
        description: username of the user
        schema:
          type: string
        example: PetWard

    get:
      summary: Read account
      responses:
        404:
          description: Not found
        200:
          description: Found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/account'

    post:
      summary: Create account for user
      requestBody:
        description: User of the account
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/userWithCredentials'
      responses:
        400:
          description: Invalid user input (Bad Request)
        409:
          description: Already exists (Conflict)
        201:
          description: Created

    put:
      summary: Update an account
      requestBody:
        description: Account to update
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/new_account'
      responses:
        200:
          description: Account updated
        400:
          description: Username does not match body or is invalid
        401:
          description: User unauthorized to do this action
        404:
          description: Account not found

    delete:
      summary: Delete a user
      responses:
        200:
          description: User deleted
        404:
          description: User not found


  /accounts/{username}/add-cash/{value}:
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
        example: "Alice007"
        description: The user username
      - name: value
        in: path
        required: true
        schema:
          type: number
          format: double
        example: 1000.0
        description: The amount of cash to add
    patch:
      summary: Add cash to the account of the user
      responses:
        200:
          description: Cash added
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/account'
        400:
          description: Value is invalid
        404:
          description: User not found
        401:
          description: User unauthorized to do this action


  /accounts/{username}/remove-cash/{value}:
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
        example: "Alice007"
        description: The user username
      - name: value
        in: path
        required: true
        schema:
          type: number
          format: double
        example: 1000.0
        description: The amount of cash to remove
    patch:
      summary: Remove cash from the account of the user
      responses:
        200:
          description: Cash removed
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/account'
        400:
          description: Value is invalid
        404:
          description: User not found
        401:
          description: Unauthorized to do this action


  /stocks/{owner}:
    get:
      summary: Get the owner stocks
      parameters:
        - name: owner
          in: path
          required: true
          description: owner username
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/stock'
        400:
          description: Bad Request
        401:
          description: User unauthorized to do this action
        404:
          description: User not found


  /stocks/{owner}/{stockname}/add/{quantity}:
    patch:
      summary: Add the asked quantity of the wanted stock to the owner
      parameters:
        - name: owner
          in: path
          required: true
          description: owner username
          schema:
            type: string
        - name: stockname
          in: path
          required: true
          description: stock name
          schema:
            type: string
        - name: quantity
          in: path
          required: true
          description: quantity of stock wanted
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/stock'
        400:
          description: Bad Request
        401:
          description: User unauthorized to do this action
        404:
          description: Ressource not found


  /stocks/{owner}/{stockname}/remove/{quantity}:
    patch:
      summary: Remove the asked quantity of the wanted stock to the owner
      parameters:
        - name: owner
          in: path
          required: true
          description: owner username
          schema:
            type: string
        - name: stockname
          in: path
          required: true
          description: stock name
          schema:
            type: string
        - name: quantity
          in: path
          required: true
          description: quantity of stock wanted
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/stock'
        400:
          description: Bad Request
        401:
          description: Unauthorized
        404:
          description: Ressource not found

  /orders:
    post:
      summary: Create a new order
      requestBody:
        description: Order to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/orderToCreate"
      responses:
        200:
          description: Order created
        400:
          description: Invalid input, object invalid
        404:
          description: Owner or stock not found

  /orders/{order-id}:
    parameters:
      - name: order-id
        in: path
        description: Order id
        required: true
        schema:
          type: number
          format: integer
          example: 1

    get:
        summary: Get an order by id
        responses:
            200:
              description: Order found
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/order"
            401:
              description: User unauthorized to do this action
            404:
              description: Order not found

    delete:
      summary: Delete an order
      responses:
        200:
          description: Order deleted
        404:
          description: Order not found
        405:
          description: Order can't be cancelled if it's partially filled or filled

  /orders/{order-placer}:
    parameters:
      - name: owner
        in: path
        description: Order placer username
        required: true
        schema:
          type: string
        example: "Alice007"
    get:
      summary: Get all orders of an owner (account username)
      responses:
        200:
          description: Orders found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/order"
        404:
          description: Owner not found
        400:
          description: Invalid input, object invalid



  /prices:

    get:
      summary: Read all prices
      responses:
        200:
          description: Returned list of prices
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/price'

  /prices/{stockName}:

    get:
      summary: Read price by stock name
      parameters:
        - name: stockName
          in: path
          required: true
          description: Name of the stock
          schema:
            type: string
      responses:
        200:
          description: Returned price
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/price'
        404:
          description: Price not found


components:
  schemas:
    account:
      type: object
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        cash:
          type: number
      example:
        username: Alice007
        firstname: Alice
        lastname: Wonderland
        cash: 1000.0

    new_account:
      type: object
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string

    credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      example:
        username: Alice007
        password: password123

    userWithCredentials:
      type: object
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string

    stock:
      type: object
      properties:
        owner:
          type: string
        stock_name:
          type: string
        quantity:
          type: integer

    orderToCreate:
      type: object
      properties:
        order-placer:
          type: string
        stock-name:
          type: string
        quantity:
          type: number
          format: integer
        side:
          type: string
          enum: [ BUY, SELL ]
        type:
          type: string
          enum: [ MARKET, LIMIT ]
        price:
          type: number
          format: float

    order:
      type: object
      properties:
        order-id:
          type: number
          format: integer
        order-placer:
          type: string
        stock-name:
          type: string
        initial-quantity:
          type: number
          format: integer
        current-quantity:
          type: number
          format: integer
        side:
          type: string
          enum: [ BUY, SELL ]
        type:
          type: string
          enum: [ MARKET, LIMIT ]
        state:
          type: string
          enum: [ NEW, PARTIALLY_FILLED, FILLED ]
        price:
          type: number
          format: double
        creation-date:
          type: string
          format: date-time

    price:
      type: object
      properties:
        stockName:
          type: string
        buyPrice:
          type: number
          format: double
        sellPrice:
          type: number
          format: double
        lastPrice:
          type: number
          format: double